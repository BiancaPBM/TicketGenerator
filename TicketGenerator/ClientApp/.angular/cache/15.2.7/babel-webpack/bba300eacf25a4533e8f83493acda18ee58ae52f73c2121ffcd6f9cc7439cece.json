{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from \"@angular/core\";\nimport { FormControl, Validators } from \"@angular/forms\";\nimport { TicketBox } from \"../../models/ticket-box.model\";\nimport { Box } from \"../../models/box.model\";\nlet TicketGeneratorComponent = class TicketGeneratorComponent {\n  constructor(ticketService, formBuilder) {\n    this.ticketService = ticketService;\n    this.formBuilder = formBuilder;\n    this.form = this.formBuilder.group({\n      boxes: new FormControl(null, Validators.required),\n      name: new FormControl(null),\n      generateSuperzahl: new FormControl(null)\n    });\n    this.tickets = [];\n    this.hasSuperzahl = new FormControl();\n  }\n  ngOnInit() {\n    this.ticketService.getTickets().subscribe(res => this.tickets = res);\n  }\n  generateTicket(n) {\n    if (n == null || n < 1 || n > 100) return;\n    let boxes = [];\n    let interval = setInterval(() => {\n      boxes.push(new Box(this.generateNumbers()));\n      if (--n == 0) {\n        clearInterval(interval);\n        let ticket = new TicketBox(this.form.controls.name.value, boxes, this.form.controls.generateSuperzahl.value);\n        this.ticketService.createTicket(ticket).subscribe(res => {});\n      }\n    }, 3000);\n  }\n  generateNumbers() {\n    var numbers = [];\n    var ball = document.getElementsByClassName(\"ball\");\n    while (numbers.length < 6) {\n      var random = Math.floor(Math.random() * 49) + 1;\n      if (numbers.indexOf(random) == -1) {\n        numbers.push(random);\n      }\n    }\n    //sort numbers in array\n    numbers.sort((a, b) => {\n      return a - b;\n    });\n    //color balls\n    for (var i = 0; i < ball.length; i++) {\n      ball[i].style.backgroundColor = \"white\";\n      ball[i].style.color = \"#3d3c3a\";\n      for (var j = 0; j < numbers.length; j++) {\n        if (numbers[j] == parseInt(ball[i].innerHTML)) {\n          ball[i].style.backgroundColor = \"#0f5132\";\n          ball[i].style.color = \"white\";\n        }\n      }\n    }\n    return numbers;\n  }\n  getTicketById(id) {\n    this.ticketService.getTicketById(id).subscribe(res => this.displayTicket = res);\n  }\n};\nTicketGeneratorComponent = __decorate([Component({\n  selector: 'ticket-generator',\n  templateUrl: './ticket-generator.component.html',\n  styleUrls: ['./ticket-generator.component.scss']\n})], TicketGeneratorComponent);\nexport { TicketGeneratorComponent };","map":{"version":3,"mappings":"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","names":["Component","FormControl","Validators","TicketBox","Box","TicketGeneratorComponent","constructor","ticketService","formBuilder","group","boxes","required","name","generateSuperzahl","ngOnInit","getTickets","subscribe","res","tickets","generateTicket","n","interval","setInterval","push","generateNumbers","clearInterval","ticket","form","controls","value","createTicket","numbers","ball","document","getElementsByClassName","length","random","Math","floor","indexOf","sort","a","b","i","style","backgroundColor","color","j","parseInt","innerHTML","getTicketById","id","displayTicket","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\TicketGenerator\\TicketGenerator\\ClientApp\\src\\app\\components\\ticket-generator\\ticket-generator.component.ts"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormBuilder, FormControl, Validators } from \"@angular/forms\";\r\nimport { Ticket } from \"../../models/ticket.model\";\r\nimport { TicketBox } from \"../../models/ticket-box.model\";\r\nimport { Box } from \"../../models/box.model\";\r\nimport { TicketGeneratorService } from \"../../services/ticket-generator.service\";\r\n\r\n@Component({\r\n  selector: 'ticket-generator',\r\n  templateUrl: './ticket-generator.component.html',\r\n  styleUrls: ['./ticket-generator.component.scss']\r\n})\r\nexport class TicketGeneratorComponent implements OnInit {\r\n  constructor(private ticketService: TicketGeneratorService, private formBuilder:FormBuilder) { }\r\n\r\n  ngOnInit(): void {\r\n    this.ticketService.getTickets().subscribe(res => this.tickets = res);\r\n  }\r\n\r\n  form = this.formBuilder.group({\r\n    boxes: new FormControl(null, Validators.required),\r\n    name: new FormControl(null),\r\n    generateSuperzahl: new FormControl(null)\r\n  })\r\n  displayTicket:any;\r\n  tickets:Ticket[] = [];\r\n  hasSuperzahl = new FormControl();\r\n\r\n  generateTicket(n: any): void {\r\n    if (n == null || n < 1 || n > 100)\r\n      return;\r\n    let boxes: Box[] = [];\r\n    let interval = setInterval(() => {\r\n      boxes.push(new Box(this.generateNumbers()));\r\n      if (--n == 0) {\r\n        clearInterval(interval);\r\n        let ticket = new TicketBox(this.form.controls.name.value, boxes, this.form.controls.generateSuperzahl.value);\r\n        this.ticketService.createTicket(ticket).subscribe(res => {\r\n        })\r\n      }\r\n    },3000)\r\n\r\n  }\r\n\r\n  generateNumbers(): number[] {\r\n    var numbers = [];\r\n    var ball = document.getElementsByClassName(\"ball\") as HTMLCollectionOf<HTMLElement>;\r\n\r\n    while (numbers.length < 6) {\r\n\r\n      var random = Math.floor(Math.random() * 49) + 1;\r\n\r\n      if (numbers.indexOf(random) == -1) {\r\n        numbers.push(random);\r\n      }\r\n    }\r\n\r\n    //sort numbers in array\r\n\r\n    numbers.sort( (a, b) => {\r\n      return a - b;\r\n    });\r\n\r\n    //color balls\r\n\r\n    for (var i = 0; i < ball.length; i++) {\r\n      ball[i].style.backgroundColor = \"white\";\r\n      ball[i].style.color = \"#3d3c3a\";\r\n\r\n      for (var j = 0; j < numbers.length; j++) {\r\n        if (numbers[j] == parseInt(ball[i].innerHTML)) {\r\n          ball[i].style.backgroundColor = \"#0f5132\";\r\n          ball[i].style.color = \"white\";\r\n        }\r\n      }\r\n    }\r\n    return numbers;\r\n  }\r\n\r\n  getTicketById(id: number) {\r\n    this.ticketService.getTicketById(id).subscribe(res =>\r\n      this.displayTicket = res\r\n    );\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}